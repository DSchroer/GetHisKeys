<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_actor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
vvelocity = 0;
hvelocity = 0;

drag = 0.25;
max_speed = 1.25;
accel = 0.25;

strength = 3;

instance_create(0,0,obj_player_ui)

item_sprite = noone;
item_ref = noone;
item_owner = noone;
item_name = "";

button_z = "";
button_x = "";



follow_amt = 20;

can_move = true;

show_x = true;
show_z = true;
show_inv = true;

image_speed = 4 / 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Pause
if(obj_control.paused)
{
    if(image_speed != 0)
    {
        old_image_speed = image_speed;
        image_speed = 0;
    }
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Base Movement


if(keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down))
{
    vvelocity -= accel;
}else if(keyboard_check(vk_down) &amp;&amp; !keyboard_check(vk_up))
{
    vvelocity += accel;
}else{
    if(vvelocity &lt; drag &amp;&amp; vvelocity &gt; -drag)
    {
        vvelocity = 0;
    }else{
        if(vvelocity &gt; 0)
        {
            vvelocity -= drag;
        }else{
            vvelocity += drag;
        }
    }
}

if(vvelocity &gt; max_speed)
{
    vvelocity = max_speed;
}else if(vvelocity &lt; -max_speed)
{
    vvelocity = -max_speed;
}

if(keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right))
{
    hvelocity -= accel;
}else if(keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left))
{
    hvelocity += accel;
}else{
    if(hvelocity &lt; drag &amp;&amp; hvelocity &gt; -drag)
    {
        hvelocity = 0;
    }else{
        if(hvelocity &gt; 0)
        {
            hvelocity -= drag;
        }else{
            hvelocity += drag;
        }
    }
}

if(hvelocity &gt; max_speed)
{
    hvelocity = max_speed;
}else if(hvelocity &lt; -max_speed)
{
    hvelocity = -max_speed;
}

if(!can_move)
{
    hvelocity = 0;
    vvelocity = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Normalize Movement
var len = sqrt((vvelocity * vvelocity) + (hvelocity * hvelocity))
if(len &gt; max_speed)
{
    vvelocity = (vvelocity / len) * max_speed;
    hvelocity = (hvelocity / len) * max_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Collision

var radius = 7;

if(collision_circle(x, y + vvelocity, radius, obj_collidable, true, true))
{
    vvelocity = 0;
}

if(collision_circle(x + hvelocity, y, radius, obj_collidable, true, true))
{
    hvelocity = 0;
}

if(collision_circle(x + hvelocity, y + vvelocity, radius, obj_collidable, true, true))
{
    vvelocity = 0;
    hvelocity = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotate Sprite
var threshold = 0.25;
if(abs(hvelocity) &gt; threshold || abs(vvelocity) &gt; threshold)
{
    if(keyboard_check(vk_up) || keyboard_check(vk_down) || keyboard_check(vk_left) || keyboard_check(vk_right))
    {
        image_angle = point_direction(x,y,x+hvelocity, y+vvelocity)
    }
}else{
    var px = x, py = y;
    if(keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down))
    {
        py = y - 1;
    }else if(keyboard_check(vk_down) &amp;&amp; !keyboard_check(vk_up))
    {
        py = y + 1;
    }

    if(keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right))
    {
        px = x - 1;
    }else if(keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left))
    {
        px = x + 1;
    }
    
    if(px != x || py != y)
    {
        image_angle = point_direction(x,y,px,py)
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Forces
var force_len = 12;

puickup = false;
var obj = collision_line(x,y,x+lengthdir_x(force_len,image_angle), y+lengthdir_y(force_len,image_angle), obj_actor, true, true)
if(obj != noone)
{
    if(instance_number(obj_select) == 0)
    {
        if(obj.item_name != "" &amp;&amp; item_sprite == noone)
        {
            var inst = instance_create(obj.x, obj.y, obj_select);
            button_x = "Take " + obj.item_name;
        }
        
    }else{
        obj_select.x = obj.x
        obj_select.y = obj.y
    }
    
    if(item_sprite == noone &amp;&amp; keyboard_check_pressed(ord('X')))
    {
        if(obj.item_ref != noone)
        {
            item_sprite = obj.item_sprite;
            item_ref = obj.item_ref;
            item_owner = obj;
            item_name = obj.item_name;
            
            obj.item_sprite = noone;
            obj.item_ref = noone;
            obj.item_name = "";
            
            if(obj.state != "drive" &amp;&amp; obj.state != "follow" &amp;&amp; instance_number(obj_score_bar) &gt; 0)
            {
                obj_score_bar.value -= 0.1;
            }
            
            with(obj_drunk)
            {
                if(item_ref == obj_key &amp;&amp; state != "drive" &amp;&amp; state != "follow")
                {
                    state = "drive" 
                }
            }
            
            obj.state = "follow";
            obj.follow_timer = follow_amt;
            with(obj)
            {
                clear_area()
            }
            
            with(obj_select)
            {
                instance_destroy()
                other.button_x = ""
            }
            
            puickup = true;
        }
        
    }
    
}else{
    if(instance_number(obj_select) != 0)
    {
        with(obj_select)
        {
            instance_destroy()
            other.button_x = ""
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Inventory
var radius = 7;

var obj = collision_circle(x,y,radius,obj_item,true,true);

if(obj != noone &amp;&amp; instance_number(obj_select) == 0)
{
    button_x = "Pickup " + obj.name;
}

if(obj == noone &amp;&amp; instance_number(obj_select) == 0)
{
    button_x = "";
}

if(item_name != "")
{
    if(vvelocity == 0 &amp;&amp; hvelocity == 0)
    {
         button_x = "Drop " + item_name;
    }else{
         button_x = "Throw " + item_name;
    }
}

if(keyboard_check_pressed(ord('X')))
{
    if(item_sprite != noone &amp;&amp; show_z &amp;&amp; !puickup)
    {
        var item = instance_create(x,y,item_ref)
        item_sprite = noone;
        item_ref = noone;
        item_name = "";
        if(item_owner != noone)
        {
            item.owner_index = item_owner;
            item_owner.item_index = item;
            item_owner.movement_target = noone;
        }
        item_owner = noone;
        
        item.velocity_x = hvelocity * strength;
        item.velocity_y = vvelocity * strength;
        
    }else if(obj != noone &amp;&amp; item_ref == noone &amp;&amp; instance_number(obj_select) == 0)
    {
        item_ref = obj.object_index;
        item_sprite = obj.sprite_index;
        item_owner = obj.owner_index;
        
        if(item_owner != noone)
        {
            item_owner.item_index = noone;
            item_owner.movement_target = noone;
        }
        
        item_name = obj.name;
        with(obj)
        {
            instance_destroy()
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
if(vvelocity == 0 &amp;&amp; hvelocity == 0)
{
    if(image_speed != 0 &amp;&amp; (image_index &lt;= 1 || (image_index &gt; 2 &amp;&amp; image_index &lt;= 3)))
    {
        old_image_speed = image_speed;
        image_speed = 0;
    }   
}else{
    if(image_speed == 0)
    {
        image_speed = old_image_speed;
        image_index = floor(image_index) + 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move
x += hvelocity;
y += vvelocity;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()


for (var i = 0; i &lt; instance_number(obj_drunk); i += 1)
{
    var enemy = instance_find(obj_drunk,i);
    if(enemy.state == "drive")
    {
        if(!collision_rectangle(view_xview, view_yview,view_xview + view_wview, view_yview + view_hview, enemy, true, true))
        {
            var angle = point_direction(x,y,enemy.x,enemy.y)
            draw_sprite_ext(spr_warn, 0, other.x, other.y, 1,1,angle, c_white, 1)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
