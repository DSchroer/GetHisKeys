<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_drunk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_actor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
obj_control.max_drunks = 1;

walk_speed = 1;

item_sprite = spr_key;
item_ref = obj_key;
item_name = "Key";

transit = false;
movement_target = noone;
prev_target = noone;

follow_create(self,self,16)

nx = x;
ny = y;

transit = false;
state = "drink"




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate State Machine

if(item_index != noone)
{
    if(movement_target != item_index)
    {
        movement_target = item_index;
    }
}else{
///State Machine
    if(state == "drink")
    {
        if(needs_area(obj_drink_area))
        {   
            find_area(obj_drink_area);
        }else if(!transit)
        {
            image_angle = movement_target.image_angle;
        }
    }if(state == "drive" )
    {
        if(needs_area(obj_drive_area))
        {
            find_area(obj_drive_area);
        }else if(!transit)
        {
            obj_score_bar.value = obj_score_bar.value - (1/(obj_control.max_drunks - 1));
            obj_control.ended_drunks += 1;
            clear_area();
            instance_destroy();
        }
    }if(state == "follow" )
    {
        obj_player.show_x = true;
        obj_player.show_z = true;
        obj_player.show_inv = true;
        
        if(follow_timer &gt; 0)
        {
            exclaimed = false;
            if(!collision_circle(x,y,7,obj_player,true,true))
            {
                follow_timer--;
            }
        }else if(needs_area(obj_player_area))
        {
            var px, py;
            px = floor(obj_player.x / 16) * 16; 
            py = floor(obj_player.y / 16) * 16; 
        
            pl_area = instance_create(px + 8, py + 8, obj_player_area)
            movement_target = pl_area;
            drive_timer = -1;
            
            if(!exclaimed)
            {
                instance_create(x,y,obj_exclaim)
                exclaimed = true;
            }
        }else if(!transit)
        {
            movement_target = noone;
            with(pl_area)
            {
                instance_destroy();
            }
        }
    }
}

if(movement_target != prev_target)
{
    path_reset(self)
    follow_create(self,movement_target,16)
    prev_target = movement_target;
    transit = true;
}

follow_update(100)

if(point_distance(x,y,nx,ny) &lt;= 1)
{
    if(follow_has_point())
    {
        x = nx;
        y = ny;
        var pt = follow_get_point();
        nx = pt.x;
        ny = pt.y;
    }else{
        //Item Pickup
        var obj = collision_circle(x,y,7,item_index,true,true);
        if(obj != noone)
        {
            item_sprite = obj.sprite_index;
            item_ref = obj.object_index;
            item_name = obj.name;
            item_index = noone;
            with(obj)
            {
                instance_destroy()
            }
            state = "drink"
            movement_target = noone;
            prev_target = noone;
        }
        
        if(state == "follow" &amp;&amp; exclaimed)
        {
            var obj = collision_circle(x,y,7,obj_player,true,true);
            if(obj != noone)
            {
                item_sprite = obj.item_sprite;
                item_ref = obj.item_ref;
                item_name = obj.item_name;
                obj.item_sprite = noone;
                obj.item_ref = noone;
                obj.item_name = "";
                
                state = "drink"
                movement_target = noone;
                prev_target = noone;
            }
        }
        
        //State Transition
        if(transit)
        {
            obj = collision_circle(x,y,7,movement_target,true,true);
            if(obj != noone)
            {
                transit = false;
            }
        }
        
        speed = 0;
    }
}else{

    if(nx &gt; x + walk_speed )
    {
        x += walk_speed;
    }else if(nx &lt; x - walk_speed)
    {
        x -= walk_speed;
    }else{
        x = nx;
    }
    
    if(ny &gt; y + walk_speed )
    {
        y += walk_speed;
    }else if(ny &lt; y - walk_speed)
    {
        y -= walk_speed;
    }else{
        y = ny;
    }
    
    if(nx != x || ny != y)
    {
        image_angle = point_direction(x,y,nx,ny)
    }
}


    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
